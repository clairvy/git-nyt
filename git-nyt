#! /bin/sh

COMMAND=$1

BASE='$(git config nyt.base)'

reverse()
{
    if [ "$(which tac)" = "" ]
    then tail -r $@
    else tac $@
    fi
}

is_dirty()
{
    if [ "$(git clean -dn; git diff HEAD)" = "" ]; then echo 1; return 1
    else echo 0; return 0
    fi
}

stop_if_dirty()
{
    if [ "$(is_dirty)" = "0" ]; then 
	git status
	echo "This command only work during the status is NOT DIRTY"
	exit 1
    fi
}

enclose_args()
{
    for x in $@; do echo $x; done
}

try()
{
    before=$(git show --format=%H | head -n1)
    echo "$1" | while read line;do
	if [ "$line" != "" ]; then
	    eval $line
	    ret=$?
	    if [ $ret -ne 0 ]; then return $ret; fi
	fi
    done

    local ret=$?
    if [ $ret -ne 0 ]; then git reset --hard $before; fi
    return $ret
}

diff()
{
    for x in $1
    do 
	if [ "$(eval $(printf 'a=%s;for b in %s;do if [ "$a" = "$b" ]; then echo $a; break; fi; done' $x "$2"))" = "" ] ;then echo $x;fi
    done
}

if [ $# -ne 0 ]; then shift; fi

case ${COMMAND} in
  clear) git config --unset nyt.base ;;
  base) git config nyt.base "$@";;
  list) eval git log --pretty=oneline $BASE.. "$@" | reverse ;;
  diff) eval git diff $BASE "$@";;
  rebase)
    eval git rebase -i $BASE "$@" && git nyt clear;;
  fixup)
    stop_if_dirty
    eval git reset $BASE && git add . && git commit -a "$@" && git nyt clear;;
  fixup-part)
    stop_if_dirty
    all=$(git nyt list | cut -f 1 -d" ")
    list=$(cat - | cut -f 1 -d" ")
    args=$(enclose_args "$@")
    try '
    eval git reset --hard $BASE
    for c in $list; do git cherry-pick $c; done
    git nyt fixup "$args"
    for c in $(diff "$all" "$list"); do git cherry-pick $c; done'
   ;;
  bleis)
	files=$(git diff --pretty=oneline --name-only --cached)
	oldfiles=$(git show --pretty=oneline --name-only HEAD | sed -ne '2,$p')
	if [ "$(diff "$files" "$oldfiles")" = "" ]
	then git commit "$@"
	else git commit --amend "$@"
	fi
    ;;
  *)
    git config nyt.base > /dev/null
    if [ "$?" = "1" ]; then
	git nyt base $(git log -1 --format=%H)
    fi
    
    git $COMMAND "$@"
    
    ;;
esac