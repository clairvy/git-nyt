#! /bin/sh

COMMAND=$1

BASE='$(git config nyt.base)'

main()
{
  case $COMMAND in
    clear) git config --unset nyt.base ;;
    base) git config nyt.base "$@";;
    list) 
      base=$(git config nyt.base)
      if [ "$base" != "" ]; then base="$base.."; fi
      git log --pretty=oneline $base "$@" | reverse ;;
    diff) stop_if_no_base && eval git diff $BASE "$@";;
    rebase) stop_if_no_base && eval git rebase -i $BASE "$@" && git nyt clear;;
    fixup) git nyt list | git nyt fixup-part $@;;
    fixup-part)
#      stop_if_no_base 
      all=$(git nyt list | cut -f 1 -d" ")
      list=$(cat - | cut -f 1 -d" ")
      args=$(enclose_args "$@")
      try '
	eval git reset --hard $BASE
        for c in $list; do git cherry-pick -n $c; done
        git commit "$args"
        git nyt clear
        for c in $(diff "$all" "$list"); do git nyt cherry-pick $c; done';;
    bleis)
      files=$(git diff --pretty=oneline --name-only --cached)
      oldfiles=$(git show --pretty=oneline --name-only HEAD | sed -ne '2,$p')
      if [ "$(diff "$files" "$oldfiles")" = "" ]
      then git commit "$@"
      else git commit --amend "$@"
      fi;;
    *)
      set_base
      git $COMMAND "$@";;
  esac
}
reverse()
{
    if [ "$(which tac)" = "" ]
    then tail -r $@
    else tac $@
    fi
}

is_dirty()
{
    if [ "$(git clean -dn; git diff HEAD)" = "" ]; then echo 1; return 1
    else echo 0; return 0
    fi
}

stop_if_dirty()
{
    if [ "$(is_dirty)" = "0" ]; then 
	git status
	echo "This command only work during the status is NOT DIRTY."
	exit 1
    fi
}

stop_if_no_base()
{
    if [ "$(git config nyt.base)" = "" ]; then
	echo "No base commit is set."
	exit 1
    fi
}

enclose_args()
{
    for x in $@; do echo $x; done
}

try()
{
    stop_if_dirty
    before=$(git show --format=%H | head -n1)
    before_base=$(git config nyt.base)
    echo "$1" | while read line;do
	eval $line
	ret=$?
	if [ $ret -ne 0 ]; then return $ret; fi
    done

    local ret=$?
    if [ $ret -ne 0 ]; then 
	git nyt base $before_base
	git reset --hard $before
    fi
    return $ret
}

set_base()
{
    git config nyt.base > /dev/null
    if [ $? -ne 0 ]; then 
	base="$(git log -1 --format=%H 2> /dev/null)"
#	if [ "$base" = "" ]; then
#	    echo 'Need first commit.'
#	    exit 1
#	else 
#	fi
	git nyt base "$base"
    fi
}
diff()
{
    for x in $1
    do 
	if [ "$(eval $(printf 'a=%s;for b in %s;do if [ "$a" = "$b" ]; then echo $a; break; fi; done' $x "$2"))" = "" ] ;then echo $x;fi
    done
}

if [ $# -ne 0 ]; then shift; fi

main "$@"